// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: reqresp.proto

package main

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TardisFeatureService_GetFeatures_FullMethodName = "/aarshserver.TardisFeatureService/GetFeatures"
	TardisFeatureService_GetCounters_FullMethodName = "/aarshserver.TardisFeatureService/GetCounters"
)

// TardisFeatureServiceClient is the client API for TardisFeatureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TardisFeatureServiceClient interface {
	GetFeatures(ctx context.Context, in *TardisGetFeatureRequest, opts ...grpc.CallOption) (*TardisGetFeaturesResponse, error)
	GetCounters(ctx context.Context, in *TardisGetCountersRequest, opts ...grpc.CallOption) (*TardisGetCountersResponse, error)
}

type tardisFeatureServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTardisFeatureServiceClient(cc grpc.ClientConnInterface) TardisFeatureServiceClient {
	return &tardisFeatureServiceClient{cc}
}

func (c *tardisFeatureServiceClient) GetFeatures(ctx context.Context, in *TardisGetFeatureRequest, opts ...grpc.CallOption) (*TardisGetFeaturesResponse, error) {
	out := new(TardisGetFeaturesResponse)
	err := c.cc.Invoke(ctx, TardisFeatureService_GetFeatures_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tardisFeatureServiceClient) GetCounters(ctx context.Context, in *TardisGetCountersRequest, opts ...grpc.CallOption) (*TardisGetCountersResponse, error) {
	out := new(TardisGetCountersResponse)
	err := c.cc.Invoke(ctx, TardisFeatureService_GetCounters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TardisFeatureServiceServer is the server API for TardisFeatureService service.
// All implementations must embed UnimplementedTardisFeatureServiceServer
// for forward compatibility
type TardisFeatureServiceServer interface {
	GetFeatures(context.Context, *TardisGetFeatureRequest) (*TardisGetFeaturesResponse, error)
	GetCounters(context.Context, *TardisGetCountersRequest) (*TardisGetCountersResponse, error)
	mustEmbedUnimplementedTardisFeatureServiceServer()
}

// UnimplementedTardisFeatureServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTardisFeatureServiceServer struct {
}

func (UnimplementedTardisFeatureServiceServer) GetFeatures(context.Context, *TardisGetFeatureRequest) (*TardisGetFeaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeatures not implemented")
}
func (UnimplementedTardisFeatureServiceServer) GetCounters(context.Context, *TardisGetCountersRequest) (*TardisGetCountersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCounters not implemented")
}
func (UnimplementedTardisFeatureServiceServer) mustEmbedUnimplementedTardisFeatureServiceServer() {}

// UnsafeTardisFeatureServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TardisFeatureServiceServer will
// result in compilation errors.
type UnsafeTardisFeatureServiceServer interface {
	mustEmbedUnimplementedTardisFeatureServiceServer()
}

func RegisterTardisFeatureServiceServer(s grpc.ServiceRegistrar, srv TardisFeatureServiceServer) {
	s.RegisterService(&TardisFeatureService_ServiceDesc, srv)
}

func _TardisFeatureService_GetFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TardisGetFeatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TardisFeatureServiceServer).GetFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TardisFeatureService_GetFeatures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TardisFeatureServiceServer).GetFeatures(ctx, req.(*TardisGetFeatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TardisFeatureService_GetCounters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TardisGetCountersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TardisFeatureServiceServer).GetCounters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TardisFeatureService_GetCounters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TardisFeatureServiceServer).GetCounters(ctx, req.(*TardisGetCountersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TardisFeatureService_ServiceDesc is the grpc.ServiceDesc for TardisFeatureService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TardisFeatureService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aarshserver.TardisFeatureService",
	HandlerType: (*TardisFeatureServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFeatures",
			Handler:    _TardisFeatureService_GetFeatures_Handler,
		},
		{
			MethodName: "GetCounters",
			Handler:    _TardisFeatureService_GetCounters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reqresp.proto",
}
